# goals.config.format
# 
# description: * this configuration file is read by GoalsParser.py
#              * comment line starts with '#' and will be skipped
#              * empty line will be ignored
#
# entry format
# <id> = <type> : <operator> : <resulttag> : <answertag>
# <id> = <type> : <string>
#
# <id> - must be alphanumeric (id of the goal)
# <type> - must be either:
#          'matchanyany' - if any answertag matches any resulttag
#          'matchoneany' - if the first answertag matches any resulttag
#          'matchonelast' - if the first answertag matches the last resulttag
#          'boolean' - goal based on boolean operation
#                      string that follows will be evaluated for boolean value
#
# <operator> - must be either:
#    'string_equal' - treat values correspond to <answertag> and <resulttag>
#                     as string and success means they are equal
#    'string_diff' - treat values correspond to <answertag> and <resulttag>
#                    as string and success means they are not equal
#    'string_start' - treat values correspond to <answertag> and <resulttag>
#                     as string and success means resulttag string starts with
#                     answertag string.
#            example: answertag value = 'MySecret'
#                     resulttag value = 'MySecretSauceIsSriracha'
#    'string_end' - treat values correspond to <answertag> and <resulttag>
#                     as string and success means resulttag string ends with
#                     answertag string.
#            example: answertag value = 'Sriracha'
#                     resulttag value = 'EatMoreFoodWithSriracha'
#    'integer_equal' - treat values correspond to <answertag> and <resulttag>
#                      as integer and success means they are equal
#    'integer_greater' - treat values correspond to <answertag> and <resulttag>
#                        as integer and success means answertag value > resulttag value
#    'integer_lessthan' - treat values correspond to <answertag> and <resulttag>
#                         as integer and success means answertag value < resulttag value
#              
# <resulttag> should be looked at as the 'Result' side, thus <resulttag> must be either:
#                   <string> - alphanumeric string - default to look up in 'Result'
#                   'result'.<string> - corresponding tag is looked up in 'Result'
#        Note: 'answer'.<string> and 'answer=<string>' is NOT allowed
# <answertag> should be looked at as the 'Answer' side - but we allow looking up the
#        answer from the 'Result' also, thus <answertag> must be either:
#                   <string> - alphanumeric string - default to look up in 'Result'
#                   'answer'.<string> - corresponding tag is looked up in 'Answer'
#                   'result'.<string> - corresponding tag is looked up in 'Result'
#        For <answertag>, the following special cases are allowed also:
#        'answer'=<string> - No lookup is done, just use the string as the answer.
#                            Store in JSON output file as 'answer=string'
#        'asciirandom'=<lowerbound>-<upperbound> - No lookup is done.
#                      The value is generated using random generator (seed by the
#                      lab instance seed) - value is chosen between lowerbound and
#                      upperbound (lowerbound and upperbound will be checked to make
#                      sure that they are within ASCII range). The value chosen by
#                      the random generator is then converted to ASCII.
#                      The ASCII string is stored as a string in the JSON output file
#                      as 'answer=<generated_random_ascii_string>'
#        'hexrandom'=<lowerbound>-<upperbound> - No lookup is done.
#                    Similar to asciirandom above but value chosen is converted
#                    to hex value first.
#        'intrandom'=<lowerbound>-<upperbound> - No lookup is done.
#                    Similar to asciirandom above but value chosen is converted
#                    to integer value first.
#        'hash'=<string> - No lookup is done.
#                          The value is generated by using md5sum hash of concatenation of
#                          the lab instance seed and the <string>. The value is stored as
#                          a string in JSON output file.
#                          as 'answer=<generated_hash_value_string>'
#
# for example:
# crash : matchanyany : string_equal : crashstring : inputstring
# means : for goal of 'crash', if any of the crashstring matches
#         any of the inputstring, it is considered successful
#

