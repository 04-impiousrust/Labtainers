/*
This software was created by United States Government employees at 
The Center for Cybersecurity and Cyber Operations (C3O) 
at the Naval Postgraduate School NPS.  Please note that within the 
United States, copyright protection is not available for any works 
created  by United States Government employees, pursuant to Title 17 
United States Code Section 105.   This software is in the public 
domain and is not subject to copyright. 
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:
  1. Redistributions of source code must retain the above copyright
     notice, this list of conditions and the following disclaimer.
  2. Redistributions in binary form must reproduce the above copyright
     notice, this list of conditions and the following disclaimer in the
     documentation and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
 */
package labtainers.mainui;

import java.awt.Component;
import java.awt.Dimension;
import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollBar;
import javax.swing.SwingUtilities;

/**
 *
 * @author Daniel Liao
 */
public class ContainerObjPanel extends javax.swing.JPanel {

    /**
     * Creates new form ContainerObjPanel
     */
    private final MainWindow mainWindow;
    private final LabData.ContainerData data;

    // Constructor for loading a container object panel based on a container data object
    public ContainerObjPanel(MainWindow mainWindow, LabData.ContainerData data){
        initComponents();
        editMenu.add(fixlocalMenuItem);
        editMenuBar.add(treataslocalMenuItem);
        editMenu.add(editDockerMenuItem);
        editMenu.add(openShellMenuItem);
        this.data = data;
        this.mainWindow = mainWindow;
        this.containerAddHostScrollPaneBar = AddHostsScrollPane.getVerticalScrollBar();
        this.containerConfigNetworksScrollPaneBar = ContainerConfigNetworksScrollpane.getVerticalScrollBar();  
        this.ContainerLabelName.setText(this.data.name);
        this.RenameContainerTextfield.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ContainerConfigWindow = new javax.swing.JDialog();
        containerTabPane = new javax.swing.JTabbedPane();
        ContainerConfigGeneralTab = new javax.swing.JPanel();
        UserLabel = new javax.swing.JLabel();
        TerminalCountLabel = new javax.swing.JLabel();
        PasswordLabel = new javax.swing.JLabel();
        UserTF = new javax.swing.JTextField();
        PasswordTF = new javax.swing.JTextField();
        TerminalQuantitySpinner = new javax.swing.JSpinner();
        jLabel15 = new javax.swing.JLabel();
        TerminalGroupTextfield = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        LabGatewayTextfield = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        NoGWCheckbox = new javax.swing.JCheckBox();
        jLabel7 = new javax.swing.JLabel();
        ContainerConfigNetworksAddButton = new javax.swing.JButton();
        ContainerConfigNetworksScrollpane = new javax.swing.JScrollPane();
        ContainerConfigNetworksPanel = new javax.swing.JPanel();
        ShellButton = new javax.swing.JButton();
        ContainerConfigDockerTab = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        RegistryTextfield = new javax.swing.JTextField();
        ScriptTextfield = new javax.swing.JTextField();
        PublishTextfield = new javax.swing.JTextField();
        BaseRegistryTextfield = new javax.swing.JTextField();
        NoPrivilegeCheckbox = new javax.swing.JCheckBox();
        EditDockerfileButton = new javax.swing.JButton();
        ContainerConfigNetworkTab = new javax.swing.JPanel();
        AddHostsScrollPane = new javax.swing.JScrollPane();
        AddHostsSubPanel = new javax.swing.JPanel();
        AddHostLabel3 = new javax.swing.JLabel();
        ContainerConfigAddHostIPButton = new javax.swing.JButton();
        ContainerConfigAddHostNetworkButton = new javax.swing.JButton();
        ContainerConfigOtherTab = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        XtermTitleTextfield = new javax.swing.JTextField();
        XtermScriptTextfield = new javax.swing.JTextField();
        X11Checkbox = new javax.swing.JCheckBox();
        MyStuffCheckbox = new javax.swing.JCheckBox();
        NoPullCheckbox = new javax.swing.JCheckBox();
        ClonesSpinner = new javax.swing.JSpinner();
        jLabel13 = new javax.swing.JLabel();
        MountTextfield1 = new javax.swing.JTextField();
        MountTextfield2 = new javax.swing.JTextField();
        TapRadioButton = new javax.swing.JRadioButton();
        ContainerConfigGNS3Tab = new javax.swing.JPanel();
        ThumbVolumeLabel = new javax.swing.JLabel();
        HideLabel = new javax.swing.JLabel();
        ThumbCommandLabel = new javax.swing.JLabel();
        ThumbStopLabel = new javax.swing.JLabel();
        ThumbStopTextfield = new javax.swing.JTextField();
        ThumbVolumeTextfield = new javax.swing.JTextField();
        ThumbCommandTextfield = new javax.swing.JTextField();
        HideCheckbox = new javax.swing.JCheckBox();
        ContainerConfigUpdateButton = new javax.swing.JButton();
        ContainerConfigCancelButton = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        editMenuBar = new javax.swing.JMenu();
        ContainerRightClick = new javax.swing.JPopupMenu();
        editMenu = new javax.swing.JMenu();
        editDockerMenuItem = new javax.swing.JMenuItem();
        fixlocalMenuItem = new javax.swing.JMenuItem();
        treataslocalMenuItem = new javax.swing.JMenuItem();
        openShellMenuItem = new javax.swing.JMenuItem();
        renameContainerOption = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        deleteContainerOption = new javax.swing.JMenuItem();
        ContainerLabelName = new javax.swing.JLabel();
        RenameContainerTextfield = new javax.swing.JTextField();

        ContainerConfigWindow.setTitle("Container Configuration: ");
        ContainerConfigWindow.setMinimumSize(new java.awt.Dimension(601, 700));
        ContainerConfigWindow.setResizable(false);
        ContainerConfigWindow.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                ContainerConfigWindowWindowClosing(evt);
            }
        });

        containerTabPane.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        UserLabel.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        UserLabel.setText("User:");

        TerminalCountLabel.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        TerminalCountLabel.setText("Terminal Quantity: ");

        PasswordLabel.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        PasswordLabel.setText("Password: ");

        UserTF.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        UserTF.setText("ubuntu");

        PasswordTF.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        PasswordTF.setText("ubuntu");

        TerminalQuantitySpinner.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        TerminalQuantitySpinner.setModel(new javax.swing.SpinnerNumberModel(1, -1, null, 1));

        jLabel15.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel15.setText("Terminal Group:");
        jLabel15.setToolTipText("<html>All virtual terminals within the same group are organized<br>\nas tabs within a single virtual terminal. Terminal group names <br>\ncan be arbitrary strings.");

        TerminalGroupTextfield.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

        jLabel16.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel16.setText("Lab Gateway:");
        jLabel16.setToolTipText("<html>Optional IP address of the componentâ€™s default network<br>\ngateway. If set, this will replace the default Docker gateway.<br>\n Students can toggle between gateways by using the togglegw.sh<br> \ncommand, e.g., to enable communication with the host VM or the <br>\ninternet . This option will also replace the components resolv.conf <br>\nwith the given IP and will cause the static route to the my host<br>\n address to be deleted.");

        jLabel17.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel17.setText("NO_GW:");
        jLabel17.setToolTipText("Disable the Docker default gateway, preventing network communication with the host or external devices.\n");

        NoGWCheckbox.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jLabel7.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel7.setText("Networks:");

        ContainerConfigNetworksAddButton.setText("Add");
        ContainerConfigNetworksAddButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ContainerConfigNetworksAddButtonActionPerformed(evt);
            }
        });

        ContainerConfigNetworksScrollpane.setMaximumSize(new java.awt.Dimension(541, 32767));
        ContainerConfigNetworksScrollpane.setMinimumSize(new java.awt.Dimension(541, 136));
        ContainerConfigNetworksScrollpane.setPreferredSize(new java.awt.Dimension(541, 136));

        ContainerConfigNetworksPanel.setMaximumSize(new java.awt.Dimension(541, 32767));
        ContainerConfigNetworksPanel.setMinimumSize(new java.awt.Dimension(0, 0));
        ContainerConfigNetworksPanel.setPreferredSize(new java.awt.Dimension(0, 0));
        ContainerConfigNetworksScrollpane.setViewportView(ContainerConfigNetworksPanel);

        ShellButton.setText("Shell");
        ShellButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ShellButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ContainerConfigGeneralTabLayout = new javax.swing.GroupLayout(ContainerConfigGeneralTab);
        ContainerConfigGeneralTab.setLayout(ContainerConfigGeneralTabLayout);
        ContainerConfigGeneralTabLayout.setHorizontalGroup(
            ContainerConfigGeneralTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ContainerConfigGeneralTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ContainerConfigGeneralTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ContainerConfigGeneralTabLayout.createSequentialGroup()
                        .addComponent(UserLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(UserTF, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(PasswordLabel)
                        .addGap(3, 3, 3)
                        .addComponent(PasswordTF, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(ContainerConfigGeneralTabLayout.createSequentialGroup()
                        .addGroup(ContainerConfigGeneralTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, ContainerConfigGeneralTabLayout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(ContainerConfigNetworksAddButton))
                            .addGroup(ContainerConfigGeneralTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(ContainerConfigGeneralTabLayout.createSequentialGroup()
                                    .addComponent(TerminalCountLabel)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(TerminalQuantitySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jLabel15))
                                .addGroup(ContainerConfigGeneralTabLayout.createSequentialGroup()
                                    .addComponent(jLabel16)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(LabGatewayTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(ContainerConfigGeneralTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(ContainerConfigGeneralTabLayout.createSequentialGroup()
                                .addGap(9, 9, 9)
                                .addComponent(jLabel17)
                                .addGap(3, 3, 3)
                                .addComponent(NoGWCheckbox))
                            .addComponent(TerminalGroupTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ShellButton)))
                    .addComponent(ContainerConfigNetworksScrollpane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(21, Short.MAX_VALUE))
        );
        ContainerConfigGeneralTabLayout.setVerticalGroup(
            ContainerConfigGeneralTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ContainerConfigGeneralTabLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(ContainerConfigGeneralTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(UserLabel)
                    .addComponent(UserTF, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(PasswordTF, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(PasswordLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(ContainerConfigGeneralTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TerminalCountLabel)
                    .addComponent(TerminalQuantitySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15)
                    .addComponent(TerminalGroupTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(ContainerConfigGeneralTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ContainerConfigGeneralTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(LabGatewayTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel16)
                        .addComponent(jLabel17))
                    .addComponent(NoGWCheckbox, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ContainerConfigGeneralTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ContainerConfigGeneralTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel7)
                        .addComponent(ContainerConfigNetworksAddButton))
                    .addComponent(ShellButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ContainerConfigNetworksScrollpane, javax.swing.GroupLayout.PREFERRED_SIZE, 326, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        containerTabPane.addTab("General ", ContainerConfigGeneralTab);

        jLabel1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel1.setText("Script:");

        jLabel2.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel2.setText("Base Registry:");

        jLabel3.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel3.setText("Registry:");

        jLabel4.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel4.setText("No Privilege:");

        jLabel5.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel5.setText("Publish:");
        jLabel5.setToolTipText("<html>Optional arguments to the Docker --publish argument for<br>\nmaking container ports visible at the host interface. For example, a value of<br>\n127.0.0.1:60022:22/tcp<br>\nwill bind host port 60022 to container port 22.");

        RegistryTextfield.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

        ScriptTextfield.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

        PublishTextfield.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

        BaseRegistryTextfield.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

        EditDockerfileButton.setText("Edit Dockerfile");
        EditDockerfileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditDockerfileButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ContainerConfigDockerTabLayout = new javax.swing.GroupLayout(ContainerConfigDockerTab);
        ContainerConfigDockerTab.setLayout(ContainerConfigDockerTabLayout);
        ContainerConfigDockerTabLayout.setHorizontalGroup(
            ContainerConfigDockerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ContainerConfigDockerTabLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(ContainerConfigDockerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel4)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel1)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(ContainerConfigDockerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ContainerConfigDockerTabLayout.createSequentialGroup()
                        .addComponent(ScriptTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 126, Short.MAX_VALUE)
                        .addComponent(EditDockerfileButton))
                    .addGroup(ContainerConfigDockerTabLayout.createSequentialGroup()
                        .addGroup(ContainerConfigDockerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(PublishTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(BaseRegistryTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(RegistryTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(NoPrivilegeCheckbox))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        ContainerConfigDockerTabLayout.setVerticalGroup(
            ContainerConfigDockerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ContainerConfigDockerTabLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(ContainerConfigDockerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ScriptTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(EditDockerfileButton))
                .addGap(12, 12, 12)
                .addGroup(ContainerConfigDockerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(RegistryTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(ContainerConfigDockerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BaseRegistryTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(ContainerConfigDockerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(PublishTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(18, 18, 18)
                .addGroup(ContainerConfigDockerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(NoPrivilegeCheckbox))
                .addContainerGap(279, Short.MAX_VALUE))
        );

        containerTabPane.addTab("Docker", ContainerConfigDockerTab);

        AddHostsScrollPane.setMaximumSize(new java.awt.Dimension(548, 32767));
        AddHostsScrollPane.setMinimumSize(new java.awt.Dimension(548, 19));
        AddHostsScrollPane.setPreferredSize(new java.awt.Dimension(548, 100));

        AddHostsSubPanel.setMaximumSize(new java.awt.Dimension(0, 0));
        AddHostsSubPanel.setMinimumSize(new java.awt.Dimension(0, 0));
        AddHostsSubPanel.setPreferredSize(new java.awt.Dimension(0, 0));
        AddHostsScrollPane.setViewportView(AddHostsSubPanel);

        AddHostLabel3.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        AddHostLabel3.setText("Add-Hosts:");

        ContainerConfigAddHostIPButton.setText("Add Host:IP");
        ContainerConfigAddHostIPButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ContainerConfigAddHostIPButtonActionPerformed(evt);
            }
        });

        ContainerConfigAddHostNetworkButton.setText("Add Network");
        ContainerConfigAddHostNetworkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ContainerConfigAddHostNetworkButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ContainerConfigNetworkTabLayout = new javax.swing.GroupLayout(ContainerConfigNetworkTab);
        ContainerConfigNetworkTab.setLayout(ContainerConfigNetworkTabLayout);
        ContainerConfigNetworkTabLayout.setHorizontalGroup(
            ContainerConfigNetworkTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ContainerConfigNetworkTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ContainerConfigNetworkTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(AddHostsScrollPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 568, Short.MAX_VALUE)
                    .addGroup(ContainerConfigNetworkTabLayout.createSequentialGroup()
                        .addComponent(AddHostLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ContainerConfigAddHostIPButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ContainerConfigAddHostNetworkButton)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        ContainerConfigNetworkTabLayout.setVerticalGroup(
            ContainerConfigNetworkTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ContainerConfigNetworkTabLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(ContainerConfigNetworkTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AddHostLabel3)
                    .addComponent(ContainerConfigAddHostIPButton)
                    .addComponent(ContainerConfigAddHostNetworkButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(AddHostsScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 446, Short.MAX_VALUE)
                .addContainerGap())
        );

        containerTabPane.addTab("Hosts", ContainerConfigNetworkTab);

        jLabel8.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel8.setText("Xterm:");

        jLabel9.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel9.setText("X11:");

        jLabel10.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel10.setText("# of Clones:");

        jLabel11.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel11.setText("No Pull:");

        jLabel12.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel12.setText("My Stuff:");

        XtermTitleTextfield.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

        XtermScriptTextfield.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

        ClonesSpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));
        ClonesSpinner.setMinimumSize(new java.awt.Dimension(45, 20));
        ClonesSpinner.setPreferredSize(new java.awt.Dimension(45, 20));

        jLabel13.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel13.setText("Mount:");

        MountTextfield1.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

        MountTextfield2.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

        TapRadioButton.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        TapRadioButton.setText("Tap");

        javax.swing.GroupLayout ContainerConfigOtherTabLayout = new javax.swing.GroupLayout(ContainerConfigOtherTab);
        ContainerConfigOtherTab.setLayout(ContainerConfigOtherTabLayout);
        ContainerConfigOtherTabLayout.setHorizontalGroup(
            ContainerConfigOtherTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ContainerConfigOtherTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ContainerConfigOtherTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ContainerConfigOtherTabLayout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(XtermTitleTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(XtermScriptTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(ContainerConfigOtherTabLayout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addGap(4, 4, 4)
                        .addComponent(ClonesSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel9)
                        .addGap(3, 3, 3)
                        .addComponent(X11Checkbox)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel11)
                        .addGap(6, 6, 6)
                        .addComponent(NoPullCheckbox)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel12)
                        .addGap(1, 1, 1)
                        .addComponent(MyStuffCheckbox))
                    .addGroup(ContainerConfigOtherTabLayout.createSequentialGroup()
                        .addComponent(jLabel13)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(MountTextfield1, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(MountTextfield2, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(TapRadioButton))
                .addContainerGap(114, Short.MAX_VALUE))
        );
        ContainerConfigOtherTabLayout.setVerticalGroup(
            ContainerConfigOtherTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ContainerConfigOtherTabLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(ContainerConfigOtherTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(XtermTitleTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(XtermScriptTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(ContainerConfigOtherTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(MountTextfield1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(MountTextfield2, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(ContainerConfigOtherTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(X11Checkbox, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(ContainerConfigOtherTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel10)
                        .addComponent(ClonesSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel9))
                    .addComponent(NoPullCheckbox, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(MyStuffCheckbox, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(ContainerConfigOtherTabLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(ContainerConfigOtherTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel11)
                            .addComponent(jLabel12))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(TapRadioButton)
                .addContainerGap(327, Short.MAX_VALUE))
        );

        containerTabPane.addTab("Other", ContainerConfigOtherTab);

        ThumbVolumeLabel.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        ThumbVolumeLabel.setText("Thumb Volume:");

        HideLabel.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        HideLabel.setText("Hide:");

        ThumbCommandLabel.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        ThumbCommandLabel.setText("Thumb Command:");

        ThumbStopLabel.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        ThumbStopLabel.setText("Thumb Stop:");

        javax.swing.GroupLayout ContainerConfigGNS3TabLayout = new javax.swing.GroupLayout(ContainerConfigGNS3Tab);
        ContainerConfigGNS3Tab.setLayout(ContainerConfigGNS3TabLayout);
        ContainerConfigGNS3TabLayout.setHorizontalGroup(
            ContainerConfigGNS3TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ContainerConfigGNS3TabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ContainerConfigGNS3TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(ThumbStopLabel)
                    .addComponent(ThumbCommandLabel)
                    .addComponent(ThumbVolumeLabel)
                    .addComponent(HideLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(ContainerConfigGNS3TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ThumbStopTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ThumbVolumeTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ThumbCommandTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(HideCheckbox))
                .addContainerGap(236, Short.MAX_VALUE))
        );
        ContainerConfigGNS3TabLayout.setVerticalGroup(
            ContainerConfigGNS3TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ContainerConfigGNS3TabLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(ContainerConfigGNS3TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ThumbVolumeTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ThumbVolumeLabel))
                .addGap(18, 18, 18)
                .addGroup(ContainerConfigGNS3TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ThumbCommandTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ThumbCommandLabel))
                .addGap(18, 18, 18)
                .addGroup(ContainerConfigGNS3TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ThumbStopTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ThumbStopLabel))
                .addGap(18, 18, 18)
                .addGroup(ContainerConfigGNS3TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(HideLabel)
                    .addComponent(HideCheckbox))
                .addContainerGap(314, Short.MAX_VALUE))
        );

        containerTabPane.addTab("GNS3", ContainerConfigGNS3Tab);

        ContainerConfigUpdateButton.setText("Confirm");
        ContainerConfigUpdateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ContainerConfigUpdateButtonActionPerformed(evt);
            }
        });

        ContainerConfigCancelButton.setText("Cancel");
        ContainerConfigCancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ContainerConfigCancelButtonActionPerformed(evt);
            }
        });

        editMenuBar.setText("Edit");
        jMenuBar1.add(editMenuBar);

        ContainerConfigWindow.setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout ContainerConfigWindowLayout = new javax.swing.GroupLayout(ContainerConfigWindow.getContentPane());
        ContainerConfigWindow.getContentPane().setLayout(ContainerConfigWindowLayout);
        ContainerConfigWindowLayout.setHorizontalGroup(
            ContainerConfigWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ContainerConfigWindowLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ContainerConfigWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(containerTabPane)
                    .addGroup(ContainerConfigWindowLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(ContainerConfigUpdateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(ContainerConfigCancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        ContainerConfigWindowLayout.setVerticalGroup(
            ContainerConfigWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ContainerConfigWindowLayout.createSequentialGroup()
                .addComponent(containerTabPane, javax.swing.GroupLayout.PREFERRED_SIZE, 547, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                .addGroup(ContainerConfigWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ContainerConfigUpdateButton)
                    .addComponent(ContainerConfigCancelButton))
                .addGap(10, 10, 10))
        );

        editMenu.setText("Edit...");

        editDockerMenuItem.setText("dockerfile");
        editDockerMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editDockerMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(editDockerMenuItem);

        fixlocalMenuItem.setText("fixlocal");
        fixlocalMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fixlocalMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(fixlocalMenuItem);

        treataslocalMenuItem.setText("treataslocal");
        treataslocalMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                treataslocalMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(treataslocalMenuItem);

        ContainerRightClick.add(editMenu);

        openShellMenuItem.setText("Open shell in container dir");
        openShellMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openShellMenuItemActionPerformed(evt);
            }
        });
        ContainerRightClick.add(openShellMenuItem);

        renameContainerOption.setText("rename");
        renameContainerOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                renameContainerOptionActionPerformed(evt);
            }
        });
        ContainerRightClick.add(renameContainerOption);
        ContainerRightClick.add(jSeparator1);

        deleteContainerOption.setText("delete");
        deleteContainerOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteContainerOptionActionPerformed(evt);
            }
        });
        ContainerRightClick.add(deleteContainerOption);

        setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        setMaximumSize(new java.awt.Dimension(340, 50));
        setPreferredSize(new java.awt.Dimension(340, 50));
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });

        ContainerLabelName.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        ContainerLabelName.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ContainerLabelName.setText("container_name");
        add(ContainerLabelName);

        RenameContainerTextfield.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        RenameContainerTextfield.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        RenameContainerTextfield.setMinimumSize(new java.awt.Dimension(300, 35));
        RenameContainerTextfield.setName(""); // NOI18N
        RenameContainerTextfield.setPreferredSize(new java.awt.Dimension(300, 35));
        RenameContainerTextfield.setRequestFocusEnabled(false);
        RenameContainerTextfield.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                RenameContainerTextfieldFocusLost(evt);
            }
        });
        RenameContainerTextfield.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RenameContainerTextfieldActionPerformed(evt);
            }
        });
        add(RenameContainerTextfield);
    }// </editor-fold>//GEN-END:initComponents

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        containerPanelClickHandler(evt);
    }//GEN-LAST:event_formMouseClicked
    
    private void renameContainerOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_renameContainerOptionActionPerformed
        renameContainerButton();
    }//GEN-LAST:event_renameContainerOptionActionPerformed
    
    private void deleteContainerOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteContainerOptionActionPerformed
        deleteButton();
    }//GEN-LAST:event_deleteContainerOptionActionPerformed

    private void RenameContainerTextfieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RenameContainerTextfieldActionPerformed
        renameButton();
    }//GEN-LAST:event_RenameContainerTextfieldActionPerformed

    private void RenameContainerTextfieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_RenameContainerTextfieldFocusLost
        // hide the textfield and show the container label
        RenameContainerTextfield.setVisible(false);
        ContainerLabelName.setVisible(true);
    }//GEN-LAST:event_RenameContainerTextfieldFocusLost

    private void ContainerConfigWindowWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_ContainerConfigWindowWindowClosing
        closeConfigWindow();
    }//GEN-LAST:event_ContainerConfigWindowWindowClosing

    private void ContainerConfigUpdateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ContainerConfigUpdateButtonActionPerformed
        updateData();
    }//GEN-LAST:event_ContainerConfigUpdateButtonActionPerformed
    
    private void ContainerConfigCancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ContainerConfigCancelButtonActionPerformed
        closeConfigWindow();
    }//GEN-LAST:event_ContainerConfigCancelButtonActionPerformed
   
    private void EditDockerfileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditDockerfileButtonActionPerformed
        editDockerfile();
    }//GEN-LAST:event_EditDockerfileButtonActionPerformed

    private void ContainerConfigNetworksAddButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ContainerConfigNetworksAddButtonActionPerformed
         addContainerNetworkSubPanel("", "");
    }//GEN-LAST:event_ContainerConfigNetworksAddButtonActionPerformed

    private void ContainerConfigAddHostIPButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ContainerConfigAddHostIPButtonActionPerformed
        addAddHostSubPanel("ip","","","");
    }//GEN-LAST:event_ContainerConfigAddHostIPButtonActionPerformed

    private void ContainerConfigAddHostNetworkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ContainerConfigAddHostNetworkButtonActionPerformed
        addAddHostSubPanel("network","","","");
    }//GEN-LAST:event_ContainerConfigAddHostNetworkButtonActionPerformed

    private void editDockerMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editDockerMenuItemActionPerformed
        String dockerfilePath = mainWindow.getCurrentLab().getPath()+File.separator+"dockerfiles"+File.separator+
                                "Dockerfile."+mainWindow.getLabName()+"."+this.data.name+".student";
        String cmd = "gnome-terminal -- vi "+dockerfilePath+" &";
        mainWindow.doCommand(cmd); 
    }//GEN-LAST:event_editDockerMenuItemActionPerformed

    private void treataslocalMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_treataslocalMenuItemActionPerformed
        String treataslocal = mainWindow.getCurrentLab().getPath()+File.separator+this.data.name+"_bin"+File.separator+
                                "treataslocal";
        String cmd = "gnome-terminal -- vi "+treataslocal+" &";
        mainWindow.doCommand(cmd); 
    }//GEN-LAST:event_treataslocalMenuItemActionPerformed

    private void fixlocalMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fixlocalMenuItemActionPerformed
        String fixlocal = mainWindow.getCurrentLab().getPath()+File.separator+this.data.name+"_bin"+File.separator+
                                "fixlocal";
        String cmd = "gnome-terminal -- vi "+fixlocal+" &";
        mainWindow.doCommand(cmd); 
    }//GEN-LAST:event_fixlocalMenuItemActionPerformed

    private void openShellMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openShellMenuItemActionPerformed
        String cmd = "gnome-terminal --working-directory="+mainWindow.getCurrentLab().getPath()+File.separator+this.data.name;
        System.out.println("cmd: "+cmd);
        mainWindow.doLabCommand(cmd);
    }//GEN-LAST:event_openShellMenuItemActionPerformed

    private void ShellButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ShellButtonActionPerformed
        String cmd = "gnome-terminal --working-directory="+mainWindow.getCurrentLab().getPath()+File.separator+this.data.name;
        System.out.println("cmd: "+cmd);
        mainWindow.doLabCommand(cmd);
    }//GEN-LAST:event_ShellButtonActionPerformed
    
    // BUTTONS/HANDLERS //
    
    // Handle left-click or right-click event for the container obj panel
    private boolean clicked = false;
    private void containerPanelClickHandler(java.awt.event.MouseEvent evt){
       if(!clicked){
            if(SwingUtilities.isLeftMouseButton(evt)){
                clicked = true;
                loadDataIntoContainerPanel(); 
                ContainerConfigWindow.setVisible(true);  
            }
            else if(SwingUtilities.isRightMouseButton(evt)){
                ContainerRightClick.show(this, evt.getX(), evt.getY());
            }
        } 
    }
    
    // Handler for when Container Config Window closes
    private void closeConfigWindow(){
        ContainerConfigWindow.setVisible(false);
        clearLists();
        clicked = false;
    }
    
    // Clears the list of Networks and Add-Hosts Container Config Window UI
    private void clearLists(){
        // Clear Add-host
        Component[] componentList = AddHostsSubPanel.getComponents();
        for(Component c: componentList)
            AddHostsSubPanel.remove(c);
        
        containerAddHostPanelLength=0;
        AddHostsSubPanel.setPreferredSize(new Dimension(0,containerAddHostPanelLength));
        
        // Clear network
        componentList = ContainerConfigNetworksPanel.getComponents();
        for(Component c: componentList)
            ContainerConfigNetworksPanel.remove(c);
        
        containerConfigNetworksPanelLength=0;
        ContainerConfigNetworksPanel.setPreferredSize(new Dimension(0,containerConfigNetworksPanelLength));
    }
       
    // Prompt textfield for renaming 
    private void renameContainerButton(){
        // Make the rename textfield visible, active, and all text inside preselected
        RenameContainerTextfield.setText(this.data.name);
        RenameContainerTextfield.setVisible(true);
        RenameContainerTextfield.requestFocusInWindow();
        RenameContainerTextfield.selectAll();
        
        // Hide the original container label
        ContainerLabelName.setVisible(false);
    }
    
    // Prompts the user to confirm deletion of container and removes all traces of the container
    private void deleteButton(){
        int confirm = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete the container '"+this.data.name+"'?\n"+
                                                                      "Deleting this will delete all references to this container, \n"+
                                                                      " Namely in the Results and Goals Configuration."
                                                                    , "Delete Container",  JOptionPane.YES_NO_OPTION);
        if (confirm == JOptionPane.YES_OPTION){
            JPanel containerPanel = (JPanel)this.getParent();
           
            // Delete the container from the container list in the main data object
            mainWindow.getCurrentData().deleteReferenceToContainer(data.name);
            
            // Removes all results artifact lines with the container name in it in Results Conguration UI 
            if(mainWindow.getResultsUI() != null){
               mainWindow.getResultsUI().refresh(); 
            }
            
            // Remove the panel
            containerPanel.remove(this);

            // Shorten the panel height holding all the containers and resize it.
            mainWindow.containerPanePanelLength-=50;
            containerPanel.setPreferredSize(new Dimension(0,mainWindow.containerPanePanelLength));

            // Redraw the panel containing the list of containers
            containerPanel.revalidate();
            containerPanel.repaint(); 
           
            // Delete the container in the file system
            deleteContainer();
       }
    }
    
    // Deletes the container in the lab directory structure by calling 'new_lab_setup.py -d containername'
    private void deleteContainer(){
                //call python new_lab_script to delete container
                String cmd = "new_lab_setup.py -d "+this.data.name;
                mainWindow.doLabCommand(cmd);
    }

    // Prompts the user to confirm renaming the container
    private void renameButton(){
        // Prompt user to confirm their changes
        int confirm = JOptionPane.showConfirmDialog(null, "Are you sure you want to rename the container '"+this.data.name+"' to '"+
                                                                        RenameContainerTextfield.getText()+"'?", "Rename Container",  JOptionPane.YES_NO_OPTION);
        if (confirm == JOptionPane.YES_OPTION){
            String newName = RenameContainerTextfield.getText();
            
            //Refactor the mainUI's current LabData.ResultsData obj
            mainWindow.getCurrentData().getResultsData().refactorContainerReference(data.name, newName);
            
            // Refactor the container name in the result s UI
            if(mainWindow.getResultsUI() != null){
                mainWindow.getResultsUI().refactorContainerReferenceInUI(data.name, newName);
            }
            
            // Rename the container in directory
            renameContainer(this.data.name,newName);
            
            // Rename the container in GUI and data object
            this.data.name = newName;
            ContainerLabelName.setText(newName);
            
        }
        
        // hide the textfield and show the container label
        RenameContainerTextfield.setVisible(false);
        ContainerLabelName.setVisible(true);
    }
    
     // Renames the container in the lab directory structure by calling 'new_lab_setup.py -r oldName newName'
    private void renameContainer(String oldName, String newName){
        try{
                //call python new_lab_script: new_lab_setup.py -b basename
                String cmd = "./renameContainer.sh "+mainWindow.getLabsPath()+" "+mainWindow.getLabName()+" "+oldName+" "+newName;
                System.out.println(cmd);
                Process pr = Runtime.getRuntime().exec(cmd);
            
                BufferedReader reader = new BufferedReader(new InputStreamReader(pr.getInputStream()));
                String line;
                while((line = reader.readLine()) != null){
                    System.out.println(line);
                }
                reader.close();
            } 
            catch (IOException e){
                System.out.println(e);
            }
    }
    
    // Sets the data info based on the fields in the Container Configuration Window
    public void updateData(){
        // General Tab
        data.user = UserTF.getText();
        if(data.user.length() == 0){
            JOptionPane.showMessageDialog(null, "User name must be defined.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        data.password = PasswordTF.getText();
        data.terminal_count = (int)TerminalQuantitySpinner.getValue();
        data.terminal_group = TerminalGroupTextfield.getText();
        data.lab_gateway = LabGatewayTextfield.getText();
        data.no_gw = NoGWCheckbox.isSelected();
            
        // List of Networks
        data.listOfContainerNetworks.clear(); //clear the networks so that is can be refilled with updated list of networks
        Component[] networkPanels = ContainerConfigNetworksPanel.getComponents();
        for(Component component: networkPanels){
            ContainerConfigNetworksSubpanel networkPanel = (ContainerConfigNetworksSubpanel)component;
            
            String networkName = networkPanel.getNetwork();
            //System.out.println("hi: \'"+networkName+"\'");
            String ipAddr = networkPanel.getIP();
            data.listOfContainerNetworks.add(new LabData.ContainerNetworkSubData(networkName,ipAddr));
        }
                
        // Docker
        data.script = ScriptTextfield.getText();
        data.registry = RegistryTextfield.getText();
        data.base_registry = BaseRegistryTextfield.getText();    
        data.publish = PublishTextfield.getText();
        data.no_privilege = NoPrivilegeCheckbox.isSelected();
                
        // Hosts
        data.listOfContainerAddHost.clear();
        Component[] addhostPanels = AddHostsSubPanel.getComponents();
        for(Component component: addhostPanels){
            ContainerConfigAddHosts addhostPanel = (ContainerConfigAddHosts)component;
              
            //String type
            String type;
            if(addhostPanel.getNetworkCombobox().isVisible())
                type = "network";
            else
                type = "ip";
            
            String host = addhostPanel.getHost();
            String ip = addhostPanel.getIp();
            String network = addhostPanel.getNetwork();
            data.listOfContainerAddHost.add(new LabData.ContainerAddHostSubData(type, host, ip, network));
        }

        // Other
        data.xterm_title = XtermTitleTextfield.getText();
        data.xterm_script = XtermScriptTextfield.getText();
        data.clone = (int)(ClonesSpinner.getValue());
        data.x11 = X11Checkbox.isSelected();
        data.no_pull = NoPullCheckbox.isSelected();    
        data.mystuff = MyStuffCheckbox.isSelected(); 
        data.tap = TapRadioButton.isSelected();
        data.mount1 = MountTextfield1.getText();       
        data.mount2 = MountTextfield2.getText();              
        // GNS3
        data.thumb_command = ThumbCommandTextfield.getText();    
        data.thumb_stop = ThumbStopTextfield.getText();           
        data.thumb_volume = ThumbVolumeTextfield.getText();           
        data.hide = HideCheckbox.isSelected();
        
        closeConfigWindow();
    }
    
    // Opens the container's dockerfile file in a terminal text editor
    private void editDockerfile(){
            String dockerfilePath = mainWindow.getCurrentLab().getPath()+File.separator+"dockerfiles"+File.separator+
                                    "Dockerfile."+mainWindow.getLabName()+"."+this.data.name+".student";
            String cmd = "gnome-terminal -- vi "+dockerfilePath+" &";
            mainWindow.doCommand(cmd); 
    }
    
    // Add Network Subpanel to the Container Config Window
    public int containerConfigNetworksPanelLength = 0;
    private final JScrollBar containerConfigNetworksScrollPaneBar;   
    private void addContainerNetworkSubPanel(String network, String ip){
         //Resize the JPanel Holding all the containerConfigNetworksPanel to fit another containerConfigNetworksPanel 
        containerConfigNetworksPanelLength+=58;
        ContainerConfigNetworksPanel.setPreferredSize(new Dimension(0,containerConfigNetworksPanelLength));

        // Create the Container Obj Panel and add it
        ContainerConfigNetworksSubpanel newContainerConfigNetwork = new ContainerConfigNetworksSubpanel(this, mainWindow.getCurrentData(), network, ip);
        ContainerConfigNetworksPanel.add(newContainerConfigNetwork);

        // Redraw GUI with the new Panel
        ContainerConfigNetworksPanel.revalidate();
        ContainerConfigNetworksPanel.repaint();
        
        // Lower the Scroll Bar to show the newly added container
        containerConfigNetworksScrollPaneBar.setValue(58+containerConfigNetworksScrollPaneBar.getMaximum());
    }
   
    // Add Add-host Subpanel to Container Config Window
    public int containerAddHostPanelLength = 0;
    private final JScrollBar containerAddHostScrollPaneBar;   
    private void addAddHostSubPanel(String type, String host, String ip, String network){
        // Resize the JPanel Holding all the containerAddHostsPanel to fit another containerAddHostsPanel 
        containerAddHostPanelLength+=63;
        AddHostsSubPanel.setPreferredSize(new Dimension(0,containerAddHostPanelLength));

        // Create the Container Obj Panel and add it
        ContainerConfigAddHosts newContainerConfigAddHost = new ContainerConfigAddHosts(this, mainWindow.getCurrentData(), type, host, ip, network);
        AddHostsSubPanel.add(newContainerConfigAddHost);

        // Redraw GUI with the new Panel
        AddHostsSubPanel.revalidate();
        AddHostsSubPanel.repaint();
        
        // Lower the Scroll Bar to show the newly added container
        containerAddHostScrollPaneBar.setValue(63+containerAddHostScrollPaneBar.getMaximum());
    }
    
    // Set the fields of the Container Dialog Window with the data
    private void loadDataIntoContainerPanel(){
        this.ContainerConfigWindow.setTitle("Container Config: "+this.data.name);
        
        // General Tab
        this.UserTF.setText(data.user);
        this.PasswordTF.setText(data.password);
        this.TerminalQuantitySpinner.setValue(data.terminal_count);
        this.LabGatewayTextfield.setText(data.lab_gateway);
        this.NoGWCheckbox.setSelected(data.no_gw);
        for(int i=0;i<data.listOfContainerNetworks.size();i++)
            addContainerNetworkSubPanel(data.listOfContainerNetworks.get(i).network_name, data.listOfContainerNetworks.get(i).network_ipaddress);
        
        // Add-hosts
        for(int i=0;i<data.listOfContainerAddHost.size();i++)
            addAddHostSubPanel(data.listOfContainerAddHost.get(i).type,        data.listOfContainerAddHost.get(i).add_host_host, 
                               data.listOfContainerAddHost.get(i).add_host_ip, data.listOfContainerAddHost.get(i).add_host_network);
        
        // GNS3
        this.ThumbCommandTextfield.setText(data.thumb_command);
        this.ThumbStopTextfield.setText(data.thumb_stop);
        this.ThumbVolumeTextfield.setText(data.thumb_volume);
        this.HideCheckbox.setSelected(data.hide);
        
        // Docker
        this.ScriptTextfield.setText(data.script);
        this.RegistryTextfield.setText(data.registry);
        this.BaseRegistryTextfield.setText(data.base_registry);
        this.PublishTextfield.setText(data.publish);
        this.NoPrivilegeCheckbox.setSelected(data.no_privilege);
        
        // Other
        this.TerminalGroupTextfield.setText(data.terminal_group);
        this.XtermTitleTextfield.setText(data.xterm_title);
        this.XtermScriptTextfield.setText(data.xterm_script);
        this.ClonesSpinner.setValue(data.clone);
        this.X11Checkbox.setSelected(data.x11);
        this.NoPullCheckbox.setSelected(data.no_pull);
        this.MyStuffCheckbox.setSelected(data.mystuff);
        this.TapRadioButton.setSelected(data.tap);
        this.MountTextfield1.setText(data.mount1);
        this.MountTextfield2.setText(data.mount2);
    }
    
    // Updates the comboboxes that reference the networks: ADDING, DELETING, RENAMING
    public void updateNetworkComboBoxes(String type, String network, String network2){
        switch(type){
            case "Add":
                //Add new item to the networks subpanels
                for(Component panel : ContainerConfigNetworksPanel.getComponents())
                    ((ContainerConfigNetworksSubpanel)panel).addNetworkToComboBox(network);
                //Add new item to the add-host subpanels
                for(Component panel : AddHostsSubPanel.getComponents())
                    ((ContainerConfigAddHosts)panel).addNetworkToComboBox(network);
                break;
            case "Delete":
                //Delete network in network subpanels
                for(Component panel : ContainerConfigNetworksPanel.getComponents()){
                    if(((ContainerConfigNetworksSubpanel)panel).getNetworkComboBox().getSelectedItem().equals(network))
                        ((ContainerConfigNetworksSubpanel)panel).remove();
                    else
                        ((ContainerConfigNetworksSubpanel)panel).deleteNetworkInComboBox(network);
                }
                
                //Delete network in add-host subpanels
                for(Component panel : AddHostsSubPanel.getComponents()){
                    //If the panel has the network selected, then remove the entire panel, otherwise just delete the network in the combobox list
                    boolean networkComboBoxExists = ((ContainerConfigAddHosts)panel).getNetworkCombobox().isVisible();
                    if(networkComboBoxExists){
                        //This nested if statement is neccessary since the boolean above could have nullpointerexception 
                        //from getSelectedItem() if the addhosts panel doesn't feature networks
                        boolean networkIsSelected = ((ContainerConfigAddHosts)panel).getNetworkCombobox().getSelectedItem().equals(network);
                        if(networkIsSelected) 
                            ((ContainerConfigAddHosts)panel).remove();
                        else
                            ((ContainerConfigAddHosts)panel).deleteNetworkInComboBox(network);
                    }
                }
                
                break;
            case "Rename":
                //Rename item to the networks subpanels
                for(Component panel : ContainerConfigNetworksPanel.getComponents()){
                    ((ContainerConfigNetworksSubpanel)panel).renameNetworkToComboBox(network, network2);
                }
                //Rename item to the add-host subpanels
                for(Component panel : AddHostsSubPanel.getComponents()){
                    ((ContainerConfigAddHosts)panel).renameNetworkToComboBox(network, network2);
                }
                break;
            default:
                System.out.println("Not valid updateNetworkComboBoxes() option.");
                break;
        }
        ContainerConfigNetworksPanel.revalidate();
        ContainerConfigNetworksPanel.repaint();
        AddHostsSubPanel.revalidate();
        AddHostsSubPanel.repaint();
    }
    
    // GETTERS //
    
    public LabData.ContainerData getConfigData(){
        return this.data;
    }
    
    public JDialog getContainerConfigDialog(){
        return ContainerConfigWindow;
    }
    public boolean configShowing(){
        return ContainerConfigWindow.isShowing();
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel AddHostLabel3;
    private javax.swing.JScrollPane AddHostsScrollPane;
    private javax.swing.JPanel AddHostsSubPanel;
    private javax.swing.JTextField BaseRegistryTextfield;
    private javax.swing.JSpinner ClonesSpinner;
    private javax.swing.JButton ContainerConfigAddHostIPButton;
    private javax.swing.JButton ContainerConfigAddHostNetworkButton;
    private javax.swing.JButton ContainerConfigCancelButton;
    private javax.swing.JPanel ContainerConfigDockerTab;
    private javax.swing.JPanel ContainerConfigGNS3Tab;
    private javax.swing.JPanel ContainerConfigGeneralTab;
    private javax.swing.JPanel ContainerConfigNetworkTab;
    private javax.swing.JButton ContainerConfigNetworksAddButton;
    private javax.swing.JPanel ContainerConfigNetworksPanel;
    private javax.swing.JScrollPane ContainerConfigNetworksScrollpane;
    private javax.swing.JPanel ContainerConfigOtherTab;
    private javax.swing.JButton ContainerConfigUpdateButton;
    private javax.swing.JDialog ContainerConfigWindow;
    private javax.swing.JLabel ContainerLabelName;
    private javax.swing.JPopupMenu ContainerRightClick;
    private javax.swing.JButton EditDockerfileButton;
    private javax.swing.JCheckBox HideCheckbox;
    private javax.swing.JLabel HideLabel;
    private javax.swing.JTextField LabGatewayTextfield;
    private javax.swing.JTextField MountTextfield1;
    private javax.swing.JTextField MountTextfield2;
    private javax.swing.JCheckBox MyStuffCheckbox;
    private javax.swing.JCheckBox NoGWCheckbox;
    private javax.swing.JCheckBox NoPrivilegeCheckbox;
    private javax.swing.JCheckBox NoPullCheckbox;
    private javax.swing.JLabel PasswordLabel;
    private javax.swing.JTextField PasswordTF;
    private javax.swing.JTextField PublishTextfield;
    private javax.swing.JTextField RegistryTextfield;
    private javax.swing.JTextField RenameContainerTextfield;
    private javax.swing.JTextField ScriptTextfield;
    private javax.swing.JButton ShellButton;
    private javax.swing.JRadioButton TapRadioButton;
    private javax.swing.JLabel TerminalCountLabel;
    private javax.swing.JTextField TerminalGroupTextfield;
    private javax.swing.JSpinner TerminalQuantitySpinner;
    private javax.swing.JLabel ThumbCommandLabel;
    private javax.swing.JTextField ThumbCommandTextfield;
    private javax.swing.JLabel ThumbStopLabel;
    private javax.swing.JTextField ThumbStopTextfield;
    private javax.swing.JLabel ThumbVolumeLabel;
    private javax.swing.JTextField ThumbVolumeTextfield;
    private javax.swing.JLabel UserLabel;
    private javax.swing.JTextField UserTF;
    private javax.swing.JCheckBox X11Checkbox;
    private javax.swing.JTextField XtermScriptTextfield;
    private javax.swing.JTextField XtermTitleTextfield;
    private javax.swing.JTabbedPane containerTabPane;
    private javax.swing.JMenuItem deleteContainerOption;
    private javax.swing.JMenuItem editDockerMenuItem;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenu editMenuBar;
    private javax.swing.JMenuItem fixlocalMenuItem;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JMenuItem openShellMenuItem;
    private javax.swing.JMenuItem renameContainerOption;
    private javax.swing.JMenuItem treataslocalMenuItem;
    // End of variables declaration//GEN-END:variables
}
